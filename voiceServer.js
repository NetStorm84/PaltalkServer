const net = require('net');

// Create a TCP server
const server = net.createServer(socket => {
    let currentUid = null;

    console.log('New connection established');

    // Handle incoming data
    socket.on('data', data => {
        // Output the received data
        console.log(`Data received: ${data.toString('hex')}`);

        // Handle the data here
        handleData(socket, data);
    });

    // Handle end of connection
    socket.on('end', () => {
        console.log(`Connection ended for UID ${currentUid}`);
    });

    // Handle socket errors
    socket.on('error', err => {
        console.error('An error occurred:', err);
    });
});

// Start the server and listen on port 12718
server.listen(12718, () => {
    console.log('Server listening on port 12718');
});

// Placeholder function for handling data
function handleData(socket, data) {
    // Implement your data handling logic here

    const packet = Buffer.from('0000ea8000913b02d62700038918b934002e89d4293cd787c90b026096aa5ec3b5aa7f1ae304e6a7d8e1fb25f0d073f55bfba01e1826fab830128f60c1703080ed000ad79634002e898febfc3ebf0e02702950ec72f3c7e06efc527d537e9717e6483ccea7074c13913ded632ab8d04777d059ec2009cf00504ce634002c8f1da4f9f5d3795f97d9bf236343a69c8c2e81799c6edcedf334282697d1e36a1d3e3a214a5000688781155dd0715c8064f7063400299d006dbb6b1f5614f2cfa61d8e4d06b83ec7e79a0728b14c95fc9d112345658eeff3bff8ea97d0b18e204dac50b5ac8069f2160000b9188903000000ea8000913c02d62c00038918b934002fd1bad53a1bef5ab717d76dbf0dd7902afb67b588741fbef295fb10cec387bfbaaf3fa7a99abfd0438b00b5ad4048a900c16d66340029deef69b40b57c97e95a560563687bead7c2bead68807bb0f50e9b57e3120c656dd60580e0a7af02af0b0b0ac50686160c82c1634002fc1eeb672657f0874a8dda5f5f73fb980398399121897cca97ac2599134ffd4619b64f14feabd50817020b670b0ca4d90ae061634002dd7ad43b2a74e90b17c17cfcbd23994b7afaf22464842dce1f5566d8de42bd3631f2c6348ca11a04444e00be050f3f0118883960000b9188903000000ea8000913d02d63100038918b93400299ca1c7dbe95c5e2a755b483d5360d60fd94845993d19dfee849b5ffee35a7494f877b187da1ad0114010b5db60b5ac8015ac2634002b86dbffde1b2a2272446c50520dfb524fb320267f075886f1641ccd15657e709b810d3c098abb80b5ad60b5ad602dad208ac516340028c394355f389ea964550181c6fed9bea96bdbfa09c6faff4b3bd395e72367660b425014c20afa50a38e31a1ec50dac750154366340028c2fc30bf1ca297d157c97f574bf3814e7aef7c9bd60675145175633acb05407b69e8eb6afaf8f0352c301645f0b1a98058b3660000b9188903000000ea8000913e02d63600038918b9340028c2fc353f5869f8a8334ff6d32c74ced92129692856224f4f7ead7e03ab2c5d65d276c381eaf8f00d90d0a5b9e05c7281fb4476340028c38a321f591241a263fed91f4a44cc1d96126e68068a6978d4275a3f837dc07eb22c9327ea5df07258e1813c118bc3117e50d6340028ca2b429f1a95af4d29c36a458d98fbbe00bef3bbc6a2700554e56206a3513814e4e6279fdafbe06bdad07b69116b50d14d5f06340028c47ac53e1b92a4c81da43a4c8d4f512edd5111bbc69b89287b3140bd6361bcec7123af13ca51f1ade180ce5100812c800773660000b9188903000000ea8000913f02d63b00038918b934002ac829a5983e87b84286b299490d1d795afbec7390873f8de01e336b6a039040d4affae07bea3e40b644b0f12d60f22050711f9634002f951269d61d4f7f0561eb59048eebb4e923acd23e8758a9540d76d95283b76d8c86b4a6ae0acc81690311da6951fbcb824eb39634002f954a6b775b323504fad7673f0e350a3a62eaf93d470a9ccfb11595c3438334a02ac5576baa4d81df44f24660113371e17a698634002dc0b556d79a96f3affaff86c5ed174d50dd4ebc3087cc8ca49b4d10f363cd339af8c90c20eabdc10d84115e1751abeb91f68e160000b9188903000000ea8000914002d64000038918b934002dc0cd4316611228f48d86b36190cf4ed5e3adefb2189ca55b69b6ea6054fbdf89b4e29bc2bae710d931d00200407021405adc2634002ddc9c9216a672fd84f8df26a3d42f02287e38eda808a29512dc1b60c56cf5b630d94c2df2cae740b071409db0b0fe613113b3f634002ac07854f5f1126386d80e8361b42b532a025503e2bc6edd92af00dbfa95b3deca', 'hex');

    for (let index = 0; index < 30; index++) {
        socket.write(packet);
        console.log(`Sent packet ${index}`);
    }
    console.log(`Handling data: ${data}`);
}